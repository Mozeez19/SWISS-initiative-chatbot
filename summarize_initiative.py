import subprocess
from data.data_fetcher import DataFetcher  # Adjust import if necessary


def summarize_with_ollama(prompt, model="mistral"):
    """
    Send the given prompt to Ollama's LLM (e.g., mistral) for summarization.

    Args:
        prompt (str): The prompt for the summarization task.
        model (str): The name of the model to use.

    Returns:
        str: The summary from the LLM or an error message on failure.
    """
    try:
        result = subprocess.run(
            ["ollama", "run", model],
            input=prompt,
            text=True,
            capture_output=True,
            timeout=300  # timeout set to 60 seconds
        )
        return result.stdout.strip()
    except subprocess.TimeoutExpired:
        return "Error summarizing with Ollama: Operation timed out. Please try again with shorter text."
    except Exception as e:
        return f"Error summarizing with Ollama: {e}"


def summarize_initiative(initiative):
    """
    Generate a summary for the given initiative using key metadata and a truncated excerpt of full text.

    Args:
        initiative (dict): Dictionary containing initiative details.

    Returns:
        str: A concise summary generated by the LLM.
    """
    # Get required fields from the initiative
    title = initiative.get("title", "Untitled Initiative")
    submission_date = initiative.get("submitted_on") or initiative.get("submission_date", "N/A")
    full_text = initiative.get("full_text", "")

    if not full_text:
        return "No full text available for summarization."

    # Build metadata and use it to create a prompt.
    meta_info = f"Title: {title}\nSubmission Date: {submission_date}\n"
    # Use a much shorter excerpt from the full_text to lower the processing time.
    # Adjust max_text_length as needed.
    max_text_length = 256
    truncated_text = full_text[:max_text_length]

    prompt = (
        "Please summarize the following Swiss popular initiative in a concise manner. "
        "Include important details, such as the key points of the initiative, voting status (if available), and any critical dates mentioned.\n\n"
        f"{meta_info}\n"
        f"Excerpt: {truncated_text}"
    )

    # Call the summarization function
    return summarize_with_ollama(prompt)


# For testing purposes when running this file directly
if __name__ == "__main__":
    from data.data_fetcher import DataFetcher  # Adjust the import if necessary

    fetcher = DataFetcher()
    initiatives = fetcher.get_all_initiatives()

    summarized_data = []
    for initiative in initiatives:
        title = initiative.get("title", "Untitled Initiative")
        print(f"\nðŸ§  Summarizing initiative: {title}")
        summary = summarize_initiative(initiative)
        initiative["summary"] = summary
        summarized_data.append({
            "title": title,
            "summary": summary
        })
        print(f"Summary: {summary}")

    # Optionally, save the summarized data to a JSON file
    import json

    with open("summarized_initiatives.json", "w", encoding="utf-8") as f:
        json.dump(summarized_data, f, ensure_ascii=False, indent=2)
    print("\nâœ… Summarization complete. Saved to 'summarized_initiatives.json'")
